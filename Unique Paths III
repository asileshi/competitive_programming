class Solution:
    def uniquePathsIII(self, grid: List[List[int]]) -> int:
        def inside(i,j):
            if 0<=i<len(grid) and 0<=j<len(grid[0]):
                return True
            return False
        starti,startj,empty = 0,0,0
        direction = [(0,1),(0,-1),(1,0),(-1,0)]
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 0:
                    empty+=1
                if grid[i][j] == 1:
                    starti,startj = i,j
        visited = set()
        def dfs(i,j,p):
            if not inside(i,j) or (i,j) in visited or grid[i][j] == -1:
                return 0
            if grid[i][j] == 2:
                if p-1 == empty:
                    return 1
                return 0
            visited.add((i,j))
            temp = 0

            for d in direction:
                newi,newj = d[0]+i,d[1]+j
                temp+=dfs(newi,newj,p+1)
            visited.remove((i,j))
            return temp
        return dfs(starti,startj,0)
